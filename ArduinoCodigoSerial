#include <SPI.h>            
#include <SD.h>             
#include <Adafruit_GFX.h>   
#include <MCUFRIEND_kbv.h>
MCUFRIEND_kbv tft;

#define SD_CS     10
#define NAMEMATCH ""        
#define PALETTEDEPTH   0     
#define BMPIMAGEOFFSET 54
#define BUFFPIXEL      30

char namebuf[32] = "/";   
File root;
int pathlen;

// Variable para almacenar el comando recibido por serial
char serialCommand = '0';
// Variable para almacenar texto recibido por serial
String receivedText = "";
// Modo de texto activado (para el caso 2)
bool textMode = false;
unsigned long textModeStartTime = 0;

// Declaraciones de funciones
uint16_t read16(File& f);
uint32_t read32(File& f);
uint8_t showBMP(char *nm, int x, int y);
void displayText(String text);

void setup()
{
    uint16_t ID;
    Serial.begin(9600);
    
    Serial.print("Show BMP files on TFT with ID:0x");
    ID = tft.readID();
    Serial.println(ID, HEX);
    if (ID == 0x0D3D3) ID = 0x9481;
    tft.begin(ID);
    tft.fillScreen(0x001F);
    tft.setTextColor(0xFFFF, 0x0000);
    tft.setTextSize(4);
    tft.setRotation(0);
    
    bool good = SD.begin(SD_CS);
    if (!good) {
        Serial.print(F("cannot start SD"));
        while (1);
    }
    
    // Mostrar imagen por defecto al iniciar
    showBMP("/general.bmp", 5, 5);
    
    Serial.println("Sistema listo. Envía un número para cambiar la imagen:");
    Serial.println("0 o nada: general.bmp");
    Serial.println("1: imagen1.bmp");
    Serial.println("2: Modo texto (pantalla negra)");
    Serial.println("En modo texto, envía un mensaje terminado en nueva línea para mostrarlo");
}
void loop() {
    // Verificar si hay datos disponibles en el puerto serial
    if (Serial.available() > 0) {
        // Si estamos en modo texto, manejarlo de forma diferente
        if (textMode) {
            receivedText = Serial.readStringUntil('\n');
            Serial.println("Mostrando texto: " + receivedText);
            displayText(receivedText);

            // Verificar si han pasado 5 segundos desde que entramos en modo texto
            if (millis() - textModeStartTime > 5000) {  // 5000 ms = 5 segundos
                // Cambiar al modo de imagen automáticamente después de 5 segundos
                Serial.println("Han pasado 5 segundos en modo texto");
                textMode = false;  // Cambiar a modo imagen
                showBMP("/general.bmp", 5, 5);  // Mostrar la imagen general automáticamente
            }
        } else {
            // Leer el comando recibido
            serialCommand = Serial.read();
            
            // Mostrar la imagen correspondiente según el comando recibido
            switch (serialCommand) {
                case '1':
                    Serial.println("Mostrando imagen1.bmp");
                    textMode = false;
                    showBMP("/imagen1.bmp", 5, 5);
                    break;
                
                case '2':
                    Serial.println("Activando modo texto");
                    textMode = true;
                    tft.fillScreen(0x0000); // Fondo negro
                    textModeStartTime = millis(); // Guardar el tiempo actual
                    break;

                case '0':
                default:
                    Serial.println("Mostrando general.bmp");
                    textMode = false;
                    showBMP("/general.bmp", 5, 5);
                    break;
            }
            
            // Limpiar cualquier dato adicional en el buffer si no estamos en modo texto
            if (!textMode) {
                while (Serial.available() > 0) {
                    Serial.read();
                }
            }
        }
    }
    
    // Un pequeño delay para estabilidad
    delay(100);
}


// Función para mostrar texto en la pantalla TFT
void displayText(String text) {
    tft.fillScreen(0x0000); // Limpiar pantalla (fondo negro)
    tft.setCursor(10, 50);  // Posición del texto
    tft.print(text);        // Mostrar el texto en la pantalla
}

// Implementación de las funciones de lectura
uint16_t read16(File& f) {
    uint16_t result;         // read little-endian
    f.read((uint8_t*)&result, sizeof(result));
    return result;
}

uint32_t read32(File& f) {
    uint32_t result;
    f.read((uint8_t*)&result, sizeof(result));
    return result;
}

uint8_t showBMP(char *nm, int x, int y)
{
    File bmpFile;
    int bmpWidth, bmpHeight;    // W+H in pixels
    uint8_t bmpDepth;           // Bit depth (currently must be 24, 16, 8, 4, 1)
    uint32_t bmpImageoffset;    // Start of image data in file
    uint32_t rowSize;           // Not always = bmpWidth; may have padding
    uint8_t sdbuffer[3 * BUFFPIXEL];    // pixel in buffer (R+G+B per pixel)
    uint16_t lcdbuffer[(1 << PALETTEDEPTH) + BUFFPIXEL], *palette = NULL;
    uint8_t bitmask, bitshift;
    boolean flip = true;        // BMP is stored bottom-to-top
    int w, h, row, col, lcdbufsiz = (1 << PALETTEDEPTH) + BUFFPIXEL, buffidx;
    uint32_t pos;               // seek position
    boolean is565 = false;      //

    uint16_t bmpID;
    uint16_t n;                 // blocks read
    uint8_t ret;

    if ((x >= tft.width()) || (y >= tft.height()))
        return 1;               // off screen

    bmpFile = SD.open(nm);      // Parse BMP header
    if (!bmpFile) {
        Serial.println("File not found");
        return 6;  // File not found error
    }
    bmpID = read16(bmpFile);    // BMP signature
    (void) read32(bmpFile);     // Read & ignore file size
    (void) read32(bmpFile);     // Read & ignore creator bytes
    bmpImageoffset = read32(bmpFile);       // Start of image data
    (void) read32(bmpFile);     // Read & ignore DIB header size
    bmpWidth = read32(bmpFile);
    bmpHeight = read32(bmpFile);
    n = read16(bmpFile);        // # planes -- must be '1'
    bmpDepth = read16(bmpFile); // bits per pixel
    pos = read32(bmpFile);      // format
    if (bmpID != 0x4D42) ret = 2; // bad ID
    else if (n != 1) ret = 3;   // too many planes
    else if (pos != 0 && pos != 3) ret = 4; // format: 0 = uncompressed, 3 = 565
    else if (bmpDepth < 16 && bmpDepth > PALETTEDEPTH) ret = 5; // palette 
    else {
        bool first = true;
        is565 = (pos == 3);               // ?already in 16-bit format
        // BMP rows are padded (if needed) to 4-byte boundary
        rowSize = (bmpWidth * bmpDepth / 8 + 3) & ~3;
        if (bmpHeight < 0) {              // If negative, image is in top-down order.
            bmpHeight = -bmpHeight;
            flip = false;
        }

        w = bmpWidth;
        h = bmpHeight;
        if ((x + w) >= tft.width())       // Crop area to be loaded
            w = tft.width() - x;
        if ((y + h) >= tft.height())      //
            h = tft.height() - y;

        if (bmpDepth <= PALETTEDEPTH) {   // these modes have separate palette
            bmpFile.seek(bmpImageoffset - (4<<bmpDepth));
            bitmask = 0xFF;
            if (bmpDepth < 8)
                bitmask >>= bmpDepth;
            bitshift = 8 - bmpDepth;
            n = 1 << bmpDepth;
            lcdbufsiz -= n;
            palette = lcdbuffer + lcdbufsiz;
            for (col = 0; col < n; col++) {
                pos = read32(bmpFile);    //map palette to 5-6-5
                palette[col] = ((pos & 0x0000F8) >> 3) | ((pos & 0x00FC00) >> 5) | ((pos & 0xF80000) >> 8);
            }
        }

        // Set TFT address window to clipped image bounds
        tft.setAddrWindow(x, y, x + w - 1, y + h - 1);
        for (row = 0; row < h; row++) { // For each scanline...
            uint8_t r, g, b;
            int lcdidx, lcdleft;
            if (flip)   // Bitmap is stored bottom-to-top order (normal BMP)
                pos = bmpImageoffset + (bmpHeight - 1 - row) * rowSize;
            else        // Bitmap is stored top-to-bottom
                pos = bmpImageoffset + row * rowSize;
            if (bmpFile.position() != pos) { // Need seek?
                bmpFile.seek(pos);
                buffidx = sizeof(sdbuffer); // Force buffer reload
            }

            for (col = 0; col < w; ) {  //pixels in row
                lcdleft = w - col;
                if (lcdleft > lcdbufsiz) lcdleft = lcdbufsiz;
                for (lcdidx = 0; lcdidx < lcdleft; lcdidx++) { // buffer at a time
                    uint16_t color;
                    // Time to read more pixel data?
                    if (buffidx >= sizeof(sdbuffer)) { // Indeed
                        bmpFile.read(sdbuffer, sizeof(sdbuffer));
                        buffidx = 0; // Set index to beginning
                        r = 0;
                    }
                    switch (bmpDepth) {          // Convert pixel from BMP to TFT format
                        case 32:
                        case 24:
                            b = sdbuffer[buffidx++];
                            g = sdbuffer[buffidx++];
                            r = sdbuffer[buffidx++];
                            if (bmpDepth == 32) buffidx++; //ignore ALPHA
                            color = tft.color565(r, g, b);
                            break;
                        case 16:
                            b = sdbuffer[buffidx++];
                            r = sdbuffer[buffidx++];
                            if (is565)
                                color = (r << 8) | (b);
                            else
                                color = (r << 9) | ((b & 0xE0) << 1) | (b & 0x1F);
                            break;
                        case 1:
                        case 4:
                        case 8:
                            if (r == 0)
                                b = sdbuffer[buffidx++], r = 8;
                            color = palette[(b >> bitshift) & bitmask];
                            r -= bmpDepth;
                            b <<= bmpDepth;
                            break;
                    }
                    lcdbuffer[lcdidx] = color;
                }
                tft.pushColors(lcdbuffer, lcdidx, first);
                first = false;
                col += lcdidx;
            }
        }
        tft.setAddrWindow(0, 0, tft.width() - 1, tft.height() - 1); //restore full screen
        ret = 0;        // good render
    }
    bmpFile.close();
    return (ret);
}
